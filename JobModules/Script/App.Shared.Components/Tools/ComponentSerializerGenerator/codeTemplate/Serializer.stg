
DiffFieldCall(FieldName) ::=<<
    Compare<FieldName>AndSetMask(baseComponent, newComponent,ref mask);	
	
>>

DiffMethod(Comp) ::= <<
private BitArray32 DiffNetworkObject(<Comp.Name> baseComponent, <Comp.Name> newComponent)
{
    BitArray32 mask = new BitArray32(ComponentNetworkPropertyNum);
    <ComponentInfo.SortedPropertyNameList:DiffFieldCall()>
    return mask;
}

>>

DiffInterfaceMethod(Comp) ::= <<
public BitArray32 DiffNetworkObject(INetworkObject baseComponent, INetworkObject newComponent)
{
    return DiffNetworkObject(baseComponent as <Comp.Name>,newComponent as <Comp.Name>);
}

>>

PropertyIndex(FieldName) ::= <<
private int <FieldName>Index=<ComponentInfo.PropertyIndexDict.(FieldName)>;

>>

SerializeNotBoolFieldCall(FieldName) ::= <<
if (writeAll || Has<FieldName>(fieldsMask))
{
    FieldSerializeUtil.Serialize(gameComponent.<FieldName>,<ComponentInfo.ParamsDict.(FieldName)>  writer, lastGameComponent.<FieldName>,  writeAll);		
}

>>

SetBoolFieldCall(FieldName) ::=<<
if(writeAll || Has<FieldName>(fieldsMask))
{
    boolField[sendBoolNum++]=gameComponent.<FieldName>;
}

>>

SerializeFieldCallNull(FieldName) ::= <<
if (writeAll || Has<FieldName>(fieldsMask))
{
    FieldSerializeUtil.Serialize(gameComponent.<FieldName>, <ComponentInfo.ParamsDict.(FieldName)>  writer );	
}

>>


SerializeMethod(Comp) ::= <<
private void Serialize(<Comp.Name> lastGameComponent, <Comp.Name> gameComponent, BitArray32 fieldsMask, bool DoCompress, Core.Utils.MyBinaryWriter writer,bool writeAll)
{	
    if(lastGameComponent==null){
        <ComponentInfo.NotBoolPropertyNameList:SerializeFieldCallNull()>	
    }
    else{
        <ComponentInfo.NotBoolPropertyNameList:SerializeNotBoolFieldCall()>		
    }
    
    //collect changed bool value 
    BitArray32 boolField = new BitArray32(BoolPropertyNum);
    int sendBoolNum = 0;
    <ComponentInfo.BoolPropertyNameList:SetBoolFieldCall()>
    
    boolField.Serialize(writer,sendBoolNum);
}

>>

SerializeInterfaceMethod(Comp) ::= <<
public void Serialize(INetworkObject lastNetworkObject, INetworkObject gameComponent, BitArray32 fieldsMask, bool DoCompress, Core.Utils.MyBinaryWriter writer)
{
    Serialize(lastNetworkObject as <Comp.Name>, gameComponent as <Comp.Name>, fieldsMask, DoCompress, writer, false);
}

>>

SerializeAllMethod(Comp) ::= <<
public void SerializeAll(INetworkObject gameComponent, bool DoCompress, Core.Utils.MyBinaryWriter writer)
{
    Serialize(null, gameComponent as <Comp.Name>, emptyFieldMask, DoCompress, writer, true);
}

>>

DeserializeFieldCall(FieldName) ::= <<
if ( readAll || Has<FieldName>(fieldsMask) )
{
    gameComponent.<FieldName> = FieldSerializeUtil.Deserialize(gameComponent.<FieldName>, <ComponentInfo.ParamsDict.(FieldName)> reader);
}

>>

RestoreBoolFieldCall(FieldName) ::=<<
if(readAll || Has<FieldName>(fieldsMask))
{
    gameComponent.<FieldName> = boolField[site++];
}

>>

DeserializeMethod(Comp) ::= <<
private void Deserialize(<Comp.Name> gameComponent, BitArray32 fieldsMask, bool DoCompress, BinaryReader reader,bool readAll)
{
    <ComponentInfo.NotBoolPropertyNameList:DeserializeFieldCall()>
    
    //calculate num of bool value to depress	
    int sentBoolNum =  GetSentBoolNum(gameComponent,fieldsMask,readAll);
    BitArray32 boolField = new BitArray32((byte)sentBoolNum);
    boolField.Deserialize(reader, sentBoolNum);
    
    int site = 0;	
    <ComponentInfo.BoolPropertyNameList:RestoreBoolFieldCall()>
}

>>

DeserializeInterfaceMethod(Comp) ::= <<
public void Deserialize(INetworkObject gameComponent, BitArray32 fieldsMask, bool DoCompress, BinaryReader reader)
{
    Deserialize(gameComponent as <Comp.Name>, fieldsMask, <ComponentInfo.ParamsDict.(Comp.Name)> DoCompress, reader, false);
}

>>

DeserializeAllMethod(Comp) ::= <<
public void DeserializeAll(INetworkObject gameComponent, bool DoCompress, BinaryReader reader)
{
    Deserialize(gameComponent as <Comp.Name>, emptyFieldMask, <ComponentInfo.ParamsDict.(Comp.Name)> DoCompress, reader,  true);
}

>>

MergeNotBoolFieldCall(FieldName) ::= <<
if (Has<FieldName>(fieldsMask))
{
    to.<FieldName> = FieldMergeUtil.Merge(to.<FieldName>,from.<FieldName>);
}

>>

MergeBoolFieldCall(FieldName) ::=<<
    to.<FieldName> = FieldMergeUtil.Merge(to.<FieldName>,from.<FieldName>);

>>

MergeMethod(Comp) ::= <<
private void Merge(<Comp.Name> from, <Comp.Name> to, BitArray32 fieldsMask)
{
    <ComponentInfo.SortedPropertyNameList:MergeNotBoolFieldCall()>	
}

>>

MergeInterfaceMethod(Comp) ::= <<
public void Merge(INetworkObject from, INetworkObject to, BitArray32 fieldsMask)
{
    Merge(from as <Comp.Name>,to as <Comp.Name>,fieldsMask);
}

>>

HasMethodForSingleField(FieldName) ::= <<
private bool Has<FieldName>(BitArray32 mask)
{
    return mask[<FieldName>Index];
}

>>

HasMethod(Comp) ::=<<
<Comp.SortedPropertyNameList:HasMethodForSingleField()>

>>



CompareAndSetMethodForSingleField(FieldName) ::=<<
private void Compare<FieldName>AndSetMask(<ComponentInfo.Name> baseComponent, <ComponentInfo.Name> newComponent,ref BitArray32 mask)
{
    mask[<FieldName>Index] = !(FieldEqualUtil.Equals(baseComponent.<FieldName>, newComponent.<FieldName>));
}

>>

CompareAndSetMethod(Comp) ::=<<
<Comp.SortedPropertyNameList:CompareAndSetMethodForSingleField()>

>>

TestHasBoolFieldMethod(FieldName) ::=<<
if(readAll || Has<FieldName>(fieldsMask))
{
    result ++;
}

>>

GetSentBoolNumMethod(Comp) ::=<<
private int GetSentBoolNum(<ComponentInfo.name> gameComponent, BitArray32 fieldsMask, bool readAll)
{
    int result = 0;
    <Comp.BoolPropertyNameList:TestHasBoolFieldMethod()>
    return result;
}

>>

FactoryDef(NameSpace,ComponentInfo) ::= <<
using System;
using System.Text;
using Core.EntityComponent;
using Core.ObjectPool;
using Core.SnapshotReplication.Serialization.Serializer;
using <ComponentInfo.Name> = <ComponentInfo.FullName>;
namespace <NameSpace>
{
    public class <ComponentInfo.Name>ObjcetFactory :CustomAbstractObjectFactory
    {
        public <ComponentInfo.Name>ObjcetFactory() : base(typeof(<ComponentInfo.Name>)){}
        public override object MakeObject()
        {
            return new <ComponentInfo.Name>();
        }
     
       
       
    }
}
>>


SerializerDef(NameSpace,ComponentInfo) ::= <<
using System.Collections;
using System.IO;
using Core.SnapshotReplication.Serialization.NetworkObject;
using Core.SnapshotReplication.Serialization.Serializer;
using <ComponentInfo.Name> = <ComponentInfo.FullName>;
namespace <NameSpace>
{
    public class <ComponentInfo.Name>Serializer : INetworkObjectSerializer
    {
       private const int ComponentNetworkPropertyNum = <ComponentInfo.PropertyNum>;
       private byte BoolPropertyNum = <ComponentInfo.BoolPropertyNum>;
       private BitArray32 emptyFieldMask = new BitArray32(ComponentNetworkPropertyNum);
       private BitArray32 boolMask = new BitArray32(<ComponentInfo.BoolPropertyNum>);
       <ComponentInfo.SortedPropertyNameList:PropertyIndex()>
       
       //DiffMethod
       <DiffMethod(ComponentInfo)>
       <DiffInterfaceMethod(ComponentInfo)>
	   
       //SerializeMethod
       <SerializeMethod(ComponentInfo)>
       <SerializeInterfaceMethod(ComponentInfo)>
       <SerializeAllMethod(ComponentInfo)>
       //DeserializeMethod
       <DeserializeMethod(ComponentInfo)>
       <DeserializeInterfaceMethod(ComponentInfo)>
       <DeserializeAllMethod(ComponentInfo)>
       //MergeMethod
       <MergeMethod(ComponentInfo)>
       <MergeInterfaceMethod(ComponentInfo)>
       //HasMethod
       <HasMethod(ComponentInfo)>
	   
       //CompareMethod
       <CompareAndSetMethod(ComponentInfo)>
		
       //GetSentBoolNumMethod
       <GetSentBoolNumMethod(ComponentInfo)>
    }
}
>>



SerializerMapItem(Id) ::= <<
serializerMap[<Id>] = new <ComponentsIdSerializerNameMap.(Id)>();

>>

SerializerMap(ComponentsIdList,ComponentsIdSerializerNameMap) ::= <<
<ComponentsIdList:SerializerMapItem()>

>>



ComponentTypeMapItem(Id) ::= <<
componentTypeMap[<Id>] = typeof(<ComponentsIdNameMap.(Id)>);

>>

ComponentTypeMap(ComponentsIdList,ComponentsIdNameMap) ::= <<
<ComponentsIdList:ComponentTypeMapItem()>

>>



SerializerManager(NameSpace,ComponentsIdList,ComponentsIdNameMap,ComponentsIdSerializerNameMap,ComponentsIdListMaxId,Hash) ::= <<
using System;
using System.Collections.Generic;
using Core.EntityComponent;
using Core.ObjectPool;
using Core.SnapshotReplication.Serialization.Serializer;
using Core.Utils;

namespace <NameSpace>
{
    public class ComponentSerializerManager :INetworkObjectSerializerManager
    {

        private static readonly LoggerAdapter Logger = new LoggerAdapter(typeof(ComponentSerializerManager));
        private const int MaxId = <ComponentsIdListMaxId>;
        private static INetworkObjectSerializer[]  serializerMap= new INetworkObjectSerializer[MaxId] ;
        private static Type[] componentTypeMap = new Type[MaxId];
        public static String HashMd5 = "<Hash>";
        static ComponentSerializerManager()
        {
           
            FillSerializerMap();
            
            FillSerializerTypeMap();
        }

        static void FillSerializerMap()
        {
            <SerializerMap(ComponentsIdList,ComponentsIdSerializerNameMap)>
        }
        
        private ComponentSerializerManager()
        {
            
        }

        private static ComponentSerializerManager _instance;

        public static ComponentSerializerManager Instance
        {
            get
            {
                {
                    _instance = new ComponentSerializerManager();
                }
                return _instance;
            }
        }

        static void FillSerializerTypeMap()
        {
            <ComponentTypeMap(ComponentsIdList,ComponentsIdNameMap)>
        }
        public INetworkObjectSerializer GetSerializer(int typeId)
        {
            return serializerMap[typeId];
        }

        public IGameComponent CreateComponentById(int id)
        {
            Type cType = GetComponentType(id);
            return (IGameComponent)ObjectAllocators.GetAllocator(cType).Allocate();
        }

        public Type GetComponentType(int typeId)
        {
            if (typeId\<MaxId &&componentTypeMap[typeId]!=null )
            {
                return componentTypeMap[typeId];
            }
            else
            {
                Logger.ErrorFormat("{0} doesn't exist ", typeId);
                return null;
            }
        }
    }
}    
>>

ComponentAllocateMapItem(Id) ::= <<
_allocators[<Id>] = Core.ObjectPool.ObjectAllocators.GetAllocator(typeof(<ComponentsIdNameMap.(Id)>));

>>

ComponentAllocateMap(ComponentsIdList,ComponentsIdNameMap) ::= <<
<ComponentsIdList:ComponentAllocateMapItem()>

>>

ComponentAllocateManager(NameSpace,ComponentsIdList,ComponentsIdNameMap,ComponentsIdListMaxId) ::= <<
namespace <NameSpace>
{
    public class ComponentAllocateManager 
    {
       
        public static ComponentAllocateManager Instance = new ComponentAllocateManager();
        public Core.ObjectPool.IObjectAllocator[] _allocators = new Core.ObjectPool.IObjectAllocator[MaxId+1];
        
        public const int MaxId = <ComponentsIdListMaxId>;

        
        private ComponentAllocateManager()
        {
             <ComponentAllocateMap(ComponentsIdList,ComponentsIdNameMap)>
           
        }
        public void Init()
        {
            Core.EntityComponent.GameComponentInfo.Instance.Init(this._allocators,MaxId);
        }

    }
}
>>
