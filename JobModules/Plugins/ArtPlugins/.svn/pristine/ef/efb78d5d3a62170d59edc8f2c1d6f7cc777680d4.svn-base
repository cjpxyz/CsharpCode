using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering.PostProcessing;

namespace ArtPlugins
{
    public class GQS_LightDetail_Camera : GameQualitySettingBaseMB
    {
        private Flare sunFlare;

        private void Awake()
        {
          
           
            init(104);
           
        }
        [ContextMenu("test")]
        public override void updateEffect()
        {
            if (qualityValueList == null) return;
            PostProcessLayer ppl = GetComponent<PostProcessLayer>();
            var lb= FindObjectOfType<LB_LightingBoxHelper>();
            if (lb == null|| lb.mainLightingProfile==null) return;
            if (lb.mainLightingProfile.sunFlare != null) sunFlare = lb.mainLightingProfile.sunFlare;

            var ppv = FindObjectOfType<PostProcessVolume>();
          
            lb.mainLightingProfile.SSR_Enabled= (int)qualityValueList[1] != 0;
            lb.mainLightingProfile.AO_Enabled = (int)qualityValueList[2] != 0;
            lb.mainLightingProfile.sunFlare = (int)qualityValueList[3] != 0?sunFlare:null;
            
            lb.mainLightingProfile.Fog_Enabled = (int)qualityValueList[4] != 0;
            lb.mainLightingProfile.Bloom_Enabled = (int)qualityValueList[5]!=0;
            lb.mainLightingProfile.VL_Enabled = (int)qualityValueList[6]!=0;
            lb.mainLightingProfile.SunShaft_Enabled = (int)qualityValueList[7]!=0;
            BoolParameter boolParameter = new BoolParameter();
            ColorGrading cg = ppl.GetSettings<ColorGrading>();
            if (cg != null)
            {
                boolParameter.value = (int)qualityValueList[8] != 0;
                cg.enabled = boolParameter; 
            }
       var cmr = GetComponent<Camera>();
           
            //switch ((int)qualityValueList[9])
            //{
            //    case 0:

            //        lb.Update_AA(cmr, AAMode.FXAA, false);
            //        lb.Update_AA(cmr, AAMode.TAA, false);
            //        lb.Update_AA(cmr, AAMode.SMAA, false);
            //        break;

            //    case 1:

            //        lb.Update_AA(cmr, AAMode.FXAA, true);
            //        break;
            //    case 2:
            //        lb.Update_AA(cmr, AAMode.SMAA, true);
            //        break;
            //    case 3:

            //        lb.Update_AA(cmr, AAMode.TAA, true);
 
            //         break;

            //}


            lb.SendMessage("Start");
  


        }
    }

}
 