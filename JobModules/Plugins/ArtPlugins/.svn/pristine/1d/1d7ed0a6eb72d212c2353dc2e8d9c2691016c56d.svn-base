// C# example.

using System;
using System.Collections.Generic;
using UnityEditor;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;
using UnityEditor.Build;

public class VoyagerMenu
{
    public static string GetPlatformName()
    {
#if UNITY_EDITOR
        return GetPlatformForAssetBundles(EditorUserBuildSettings.activeBuildTarget);
#else
        return GetPlatformForAssetBundles(Application.platform);
#endif
    }

#if UNITY_EDITOR
    private static string GetPlatformForAssetBundles(BuildTarget target)
    {
        switch (target)
        {
            case BuildTarget.Android:
                return "Android";
            case BuildTarget.iOS:
                return "iOS";
            case BuildTarget.WebGL:
                return "WebGL";
            //			case BuildTarget.WebPlayer:
            //				return "WebPlayer";
            case BuildTarget.StandaloneWindows:
            case BuildTarget.StandaloneWindows64:
                return "Windows";
            case BuildTarget.StandaloneOSXIntel:
            //			case BuildTarget.StandaloneOSX:
            //				return "OSX";
            // SavePredictionState more build targets for your own.
            // If you add more targets, don't forget to add the same platforms to GetPlatformForAssetBundles(RuntimePlatform) function.
            default:
                return null;
        }
    }
#endif

    private static string GetPlatformForAssetBundles(RuntimePlatform platform)
    {
        switch (platform)
        {
            case RuntimePlatform.Android:
                return "Android";
            case RuntimePlatform.IPhonePlayer:
                return "iOS";
            case RuntimePlatform.WebGLPlayer:
                return "WebGL";
            case RuntimePlatform.WindowsPlayer:
                return "Windows";
            case RuntimePlatform.OSXPlayer:
                return "OSX";
            // SavePredictionState more build targets for your own.
            // If you add more targets, don't forget to add the same platforms to GetPlatformForAssetBundles(RuntimePlatform) function.
            default:
                return null;
        }
    }

    private const string TargetDir = "../../../release/";

    [MenuItem("Voyager/Build OC")]
    public static void BuildOC()
    {
        BakeOc.LoadScenes(
            new List<string>
            {
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene",
                "dynamicscene"
           },
            new List<string>
            {
                "AdditiveScene",
                "002 2x1",
                "002 3x1",
                "002 2x2",
                "002 3x2",
                "002 2x3",
                "002 3x3",
                "002 4x3",
                "002 2x5",
                "002 4x5",
                "002 5x5",
                "002 4x6",
                "002 5x7"
            });
        BakeOc.Bake();
    }

    [MenuItem("Voyager/Build Client/Development")]
    public static void BuildClient()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "client/voyager_client.exe");

        string[] levels = new string[] { "Assets/Assets/ClientScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Client/Release")]
    public static void BuildClient_rls()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "client/voyager_client_release.exe");

        string[] levels = new string[] { "Assets/Assets/ClientScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.None);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Client/Hall")]
    public static void BuildClient_hall()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "client/voyager_hall.exe");

        string[] levels = new string[] { "Assets/Assets/Hall.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Client/HallClient")]
    public static void BuildClient_hallclient()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "client/voyager_hallclient.exe");

        string[] levels = new string[] { "Assets/Assets/Hall.unity", "Assets/Assets/ClientScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Client/HallStable")]
    public static void BuildClient_hallstable()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "client/voyager_hallclient.exe");

        string[] levels = new string[] { "Assets/Assets/Hall.unity", "Assets/Assets/ClientScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.None);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    //[MenuItem("Voyager/Build Benchmark")]
    public static void BuildBenchmark()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "benchmark/voyager_benchmark.exe");

        string[] levels = new string[] { "Assets/Benchmark/Benchmark.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.None);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Development")]
    public static void BuildServer()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/dev")]
    public static void BuildServer_dev()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_dev.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Hallstable")]
    public static void BuildServer_hallstable()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_hallstable.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Release")]
    public static void BuildServer_rls()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_release.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.None);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Stable")]
    public static void BuildServer_stable()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_stable.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Test")]
    public static void BuildServer_test()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_test.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/Design")]
    public static void BuildServer_design()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_design.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build Server/HallClient")]
    public static void BuildServer_hallclient()
    {
        // Get filename.
        //string path = EditorUtility.SaveFolderPanel("Choose Location of Built Game", "", "");

        var destPath = Path.GetFullPath(TargetDir + "server/voyager_server_hallclient.exe");

        string[] levels = new string[] { "Assets/Assets/ServerScene.unity" };

        // Build player.
        string msg = BuildPipeline.BuildPlayer(levels, destPath, BuildTarget.StandaloneWindows64, BuildOptions.Development | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging);

        EditorUtility.DisplayDialog("Info", "Build Exe at " + destPath + ": " + msg, "OK");
    }

    [MenuItem("Voyager/Build AssetBundle/UncompressedAssetBundle")]
    public static void BuildAssetBundles()
    {
        AssetDatabase.RemoveUnusedAssetBundleNames();

        // Choose the output path according to the build target.
        string outputPath = Path.GetFullPath(Path.Combine(TargetDir + "AssetBundles", GetPlatformName()));
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);
        var manifest = BuildPipeline.BuildAssetBundles(outputPath, BuildAssetBundleOptions.UncompressedAssetBundle, BuildTarget.StandaloneWindows64);
        if (manifest == null)
            throw new Exception("Build Asset Bundle fail, for manifest is null");
        EditorUtility.DisplayDialog("Info", "Build Assets at " + outputPath + ", result" + manifest, "OK");
    }

    [MenuItem("Voyager/Build AssetBundle/ChunkBasedCompression")]
    public static void BuildAssetBundles_compress()
    {
        AssetDatabase.RemoveUnusedAssetBundleNames();
        // Choose the output path according to the build target.
        string outputPath = Path.GetFullPath(Path.Combine(TargetDir + "AssetBundles", GetPlatformName()));
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);
        var manifest = BuildPipeline.BuildAssetBundles(outputPath, BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows64);
        if (manifest == null)
            throw new Exception("Build Asset Bundle fail, for manifest is null");
        EditorUtility.DisplayDialog("Info", "Build Assets at " + outputPath + ", result" + manifest.GetAllAssetBundles().Length, "OK");
    }

    [MenuItem("Voyager/Build AssetBundle/AppendHashToAssetBundleName")]
    public static void BuildAssetBundles_hash()
    {
        AssetDatabase.RemoveUnusedAssetBundleNames();
        // Choose the output path according to the build target.
        string outputPath = Path.GetFullPath(Path.Combine(TargetDir + "AssetBundles", GetPlatformName()));
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);
        var manifest = BuildPipeline.BuildAssetBundles(outputPath, BuildAssetBundleOptions.AppendHashToAssetBundleName, BuildTarget.StandaloneWindows64);
        if (manifest == null)
            throw new Exception("Build Asset Bundle fail, for manifest is null");
        EditorUtility.DisplayDialog("Info", "Build Assets at " + outputPath + ", result" + manifest, "OK");
    }

    [MenuItem("Voyager/Build AssetBundle/ForceRebuildAssetBundle")]
    public static void BuildAssetBundles_rebuild()
    {
        AssetDatabase.RemoveUnusedAssetBundleNames();
        // Choose the output path according to the build target.
        string outputPath = Path.GetFullPath(Path.Combine(TargetDir + "AssetBundles", GetPlatformName()));
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);
        var manifest = BuildPipeline.BuildAssetBundles(outputPath, BuildAssetBundleOptions.ForceRebuildAssetBundle, BuildTarget.StandaloneWindows64);
        if (manifest == null)
            throw new Exception("Build Asset Bundle fail, for manifest is null");
        EditorUtility.DisplayDialog("Info", "Build Assets at " + outputPath + ", result" + manifest, "OK");
    }

    [MenuItem("Build/Clean Cache")]
    public static void CleanCache()
    {
#if UNITY_2017_1_OR_NEWER
        Caching.ClearCache();
#else
        Caching.CleanCache();
#endif
    }

    private static StringBuilder stringBuilder;
    public static void PreBuildCheck(string batchDir)
    {
        if (string.IsNullOrEmpty(batchDir))
        {
            Debug.LogError("PreBuildCheck error, batchPath is empty");
            return;
        }

        // 检测配置文件
        string configPath = Path.Combine(batchDir, "PreBuildCheckConfig.txt");
        if (!File.Exists(configPath))
        {
            Debug.LogError("PreBuildCheck error, config file can't found, path:" + configPath);
            return;
        }

        // 日志文件
        string logPath = Path.Combine(batchDir, "PreBuildCheckLog.txt");
        using (FileStream fs = File.Create(logPath))
        {
            stringBuilder = new StringBuilder();
            Application.logMessageReceived += LogCallback;

            // 执行config
            var lines = File.ReadAllLines(configPath);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i].Trim();
                if (string.IsNullOrEmpty(line)) continue;
                EditorApplication.ExecuteMenuItem(line);
            }

            Byte[] info = new UTF8Encoding(true).GetBytes(stringBuilder.ToString());
            fs.Write(info, 0, info.Length);

            Application.logMessageReceived -= LogCallback;
            stringBuilder = null;
        }
    }

    private static void LogCallback(string condition, string stackTrace, LogType type)
    {
        if (type == LogType.Error || type == LogType.Assert || type == LogType.Exception)
        {
            stringBuilder.Append(condition);
            stringBuilder.AppendLine();
            stringBuilder.Append(stackTrace);
            stringBuilder.AppendLine();
        }
    }
}