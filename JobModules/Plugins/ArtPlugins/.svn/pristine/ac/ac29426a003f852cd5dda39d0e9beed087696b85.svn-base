using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ImageMagick;

namespace ArtPlugins
{
    public class MagickTextureTool
    {
        private MagickImage image = null;
        private Color[,] pixels;

        public MagickTextureTool(Texture2D tex)
        {
            if (tex == null)
            {
                Debug.LogError("MagickTextureTool error, tex is null");
                return;
            }

            string path = string.Empty;
#if UNITY_EDITOR
            path = UnityEditor.AssetDatabase.GetAssetPath(tex);
#endif
            if (!string.IsNullOrEmpty(path))
            {
                image = new MagickImage(fileName: path);
                IPixelCollection collection = image.GetPixels();
                pixels = new Color[image.Height, image.Width];
                for (int i = 0; i < image.Height; i++)
                {
                    for (int j = 0; j < image.Width; j++)
                    {
                        Pixel pixel = collection.GetPixel(j, i);
                        MagickColor mc = pixel.ToColor();
                        Color color = new Color(mc.R / 255f, mc.G / 255f, mc.B / 255f, mc.A / 255f);
                        pixels[i, j] = color;
                    }
                }
            }
        }

        public Color GetPixelBilinear(float u, float v)
        {
            Color color = Color.black;
            if (image != null)
            {
                int w = Mathf.RoundToInt(u * image.Width), h = Mathf.RoundToInt(v * image.Height);
                if (w >= image.Width) w = image.Width - 1;
                if (h >= image.Height) h = image.Height - 1;
                color = pixels[h, w];
                // IPixelCollection pixels = image.GetPixels();
                // Pixel pixel = pixels.GetPixel(Mathf.RoundToInt(u * image.Width), Mathf.RoundToInt(v * image.Height));
                // MagickColor magickColor = pixel.ToColor();
                // color.r = magickColor.R / 255f;
                // color.g = magickColor.G / 255f;
                // color.b = magickColor.B / 255f;
                // color.a = magickColor.A / 255f;
            }
            return color;
        }
    }
}
