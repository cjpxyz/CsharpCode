using ArtPlugins;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

[CustomEditor(typeof(EmbedPrefab))]
[CanEditMultipleObjects]
public class EmbedPrefabEditor : Editor
{
    // [MenuItem("CONTEXT/EmbedPrefab/ReplaceMultipleEmbed")]
    // private static void ReplaceMultipleEmbed(MenuCommand command)
    // {
    //     if (command.context == null)
    //     {
    //         Debug.LogError("ReplaceMultipleEmbed error, command.context is null");
    //         return;
    //     }

    //     EmbedPrefab ep = command.context as EmbedPrefab;
    //     if (ep == null)
    //     {
    //         Debug.LogError("ReplaceMultipleEmbed error, ep is null");
    //         return;
    //     }
    // }

    private EmbedPrefab instance = null;
    private GameObject tempAsset;
    private static DefaultAsset updateFolder;

    public static void SetUpdateFolder(DefaultAsset folder)
    {
        updateFolder = folder;
    }

    public void SetInstance(EmbedPrefab ep)
    {
        instance = ep;
    }

    private void updateTempAsset()
    {
        if (tempAsset == null && !string.IsNullOrEmpty(instance.PrefabInAssets))
        {
            string path = AssetDatabase.GUIDToAssetPath(instance.PrefabInAssets);
            tempAsset = AssetDatabase.LoadAssetAtPath<GameObject>(path);
        }
    }

    public override void OnInspectorGUI()
    {
        instance = target as EmbedPrefab;

        if (GUILayout.Button("在 Assets 中查看"))
        {
            updateTempAsset();
            Selection.activeObject = tempAsset;
        }

        if (string.IsNullOrEmpty(instance.PrefabInAssets))
        {
            GUILayout.Label("Error:无效来源");
            return;
        }

        if (GUILayout.Button("更新所有使用我的预制"))
        {
            updateAllUseThis(instance);
        }

        // if(GUILayout.Button("跟新"))
        if (Selection.gameObjects.Length > 1)
        {
            bool validate = true;
            List<EmbedPrefab> eps = new List<EmbedPrefab>();
            foreach (var go in Selection.gameObjects)
            {
                if (go == null)
                {
                    validate = false;
                    break;
                }

                EmbedPrefab ep = go.GetComponent<EmbedPrefab>();
                if (ep == null)
                {
                    validate = false;
                    break;
                }

                eps.Add(ep);
            }
            if (validate)
            {
                if (GUILayout.Button("更新所有使用我们的预制"))
                {
                    foreach (var ep in eps) updateAllUseThis(ep);
                }
            }
        }

        updateFolder = EditorGUILayout.ObjectField("更新目录", updateFolder, typeof(DefaultAsset), false) as DefaultAsset;
    }

    private static void dealPrefab(GameObject prefab, EmbedPrefab checkAsset)
    {
        foreach (var item in prefab.GetComponentsInChildren<EmbedPrefab>())
        {
            if (item.PrefabInAssets != checkAsset.PrefabInAssets) continue;

            GameObject newGo = GameObject.Instantiate(checkAsset.gameObject);
            newGo.transform.parent = item.gameObject.transform.parent;
            newGo.transform.name = "tempGo";

            newGo.transform.localPosition = item.gameObject.transform.localPosition;
            newGo.transform.localScale = item.gameObject.transform.localScale;
            newGo.transform.localRotation = item.gameObject.transform.localRotation;

            string name = item.name;
            int sbIndex = item.transform.GetSiblingIndex();
            newGo.transform.SetSiblingIndex(sbIndex);

            // 检测MultiTag组件，保持原标签设置不变
            MultiTag oldMt = item.GetComponent<MultiTag>();
            if (oldMt != null)
            {
                MultiTag newMt = newGo.AddComponent<MultiTag>();
                MultiTag.CopyValue(newMt, oldMt);
            }

            GameObject.DestroyImmediate(item.gameObject);
            newGo.name = name;
        }
    }

    public static void updateAllUseThis(EmbedPrefab instance)
    {
        if (updateFolder == null)
        {
            EditorUtility.DisplayDialog("error", "需要指定更新目录", "ok");
            return;
        }

        if (instance == null)
        {
            Debug.LogError("updateAllUseThis error, instance is null");
            return;
        }

        var items = AssetDatabase.FindAssets(" t:prefab", new string[] { AssetDatabase.GetAssetPath(updateFolder) });
        foreach (var item in items)
        {
            //self asset 
            if (item == instance.PrefabInAssets)
            {
                continue;
            }

            string subPath = Application.dataPath.Substring(0, Application.dataPath.Length - 6);
            string assetPath = AssetDatabase.GUIDToAssetPath(item);
            string text = File.ReadAllText(subPath + assetPath);
            bool needupdate = text.IndexOf(instance.PrefabInAssets) > -1;

            if (!needupdate) continue;

            Debug.Log("updated:" + assetPath);
            var go = AssetDatabase.LoadAssetAtPath<GameObject>(assetPath);
            var goInstance = PrefabUtility.InstantiatePrefab(go) as GameObject;
            dealPrefab(goInstance, instance);
            PrefabUtility.ReplacePrefab(goInstance, go);
            GameObject.DestroyImmediate(goInstance);
        }
    }
}
